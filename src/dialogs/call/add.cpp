#include "dialogs.hpp"
#include "io_event_utils.hpp"
#include "macro.hpp"
#include "menu.hpp"

namespace bot {

using namespace std::chrono;

[[nodiscard]] consumer_t weekday_input(ContextWithUser ctx, weekday& out) {
  ctx.set_need_new_message();
  Menu<weekday> weekday_menu("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Å–æ–∑–≤–æ–Ω:",
                             ID());
  // clang-format off
    weekday_menu.add("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", Monday);
    weekday_menu.add("–í—Ç–æ—Ä–Ω–∏–∫"    , Tuesday);
    weekday_menu.add("–°—Ä–µ–¥–∞"      , Wednesday);
    weekday_menu.add("–ß–µ—Ç–≤–µ—Ä–≥"    , Thursday);
    weekday_menu.add("–ü—è—Ç–Ω–∏—Ü–∞"    , Friday);
    weekday_menu.add("–°—É–±–±–æ—Ç–∞"    , Saturday);
    weekday_menu.add("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", Sunday);
  // clang-format on
  AWAIT_ALL(weekday_menu.show(ctx, out));
  ctx.set_need_new_message();
}

[[nodiscard]] consumer_t begin_input(ContextWithUser ctx, time_of_day& out) {
  AWAIT_ALL(ctx.read_time(
      "‚è∞ ¬´–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–∑–≤–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):", out));
}

[[nodiscard]] consumer_t duration_input(ContextWithUser ctx, int64_t& out) {
  AWAIT_ALL(ctx.read_positive_number("‚è∞ ¬´–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ–∑–≤–æ–Ω–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö:", out));
}

[[nodiscard]] consumer_t active_from(ContextWithUser ctx, date& out) {
  std::string input;
  AWAIT_ALL(ctx.read_text(
      "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–∑–≤–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06.03.2025):",
      input));
  ;
  while (!date::parse(input, out)) {
    AWAIT_ALL(ctx.read_text(
        "‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞! –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 06.03.2025):"
        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: ",
        input));
  }
}

[[nodiscard]] consumer_t schedule_frequence_input(ContextWithUser ctx,
                                                  schedule_frequence& out) {
  ctx.set_need_new_message();
  Menu<schedule_frequence> menu("‚è≥ –ö–∞–∫ —á–∞—Å—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è —ç—Ç–æ—Ç —Å–æ–∑–≤–æ–Ω?", ID());
  // clang-format off
  menu.add("üéØ –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑", schedule_frequence::one_time);
  menu.add("üîÑ –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", schedule_frequence::weekly);
  menu.add("üîÉ –†–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏", schedule_frequence::biweekly);
  // clang-format on
  AWAIT_ALL(menu.show(ctx, out));
}

[[nodiscard]] consumer_t call_add_menu(ContextWithUser ctx) {
  Call call;
  call.user_id = ctx.user.user_id;
  AWAIT_ALL(ctx.read_text(
      "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–∑–≤–æ–Ω–∞. –û–Ω–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏.",
      call.name));

  AWAIT_ALL(
      ctx.read_text("üìù –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–∑–≤–æ–Ω–∞ (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ -). "
                    "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å "
                    "—Ç–µ–º—É –∏–ª–∏ –ø–æ–≤–µ—Å—Ç–∫—É –≤—Å—Ç—Ä–µ—á–∏.",
                    call.description));
  if (call.description == "-")
    call.description = "";

  AWAIT_ALL(duration_input(ctx, call.duration));

  std::vector<schedule_unit> schedule_units;
  co_await ctx.send_text(
      "üïí –¢–µ–ø–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–≤–æ–Ω–∞. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, "
      "–µ—Å–ª–∏ "
      "–≤—Å—Ç—Ä–µ—á–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã–µ –¥–Ω–∏ –∏–ª–∏ –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è.");

  for (;;) {
    schedule_unit su;
    AWAIT_ALL(weekday_input(ctx, su.wd));
    AWAIT_ALL(begin_input(ctx, su.time));
    AWAIT_ALL(schedule_frequence_input(ctx, su.frequence));
    AWAIT_ALL(active_from(ctx, su.active_from));

    schedule_units.emplace_back(std::move(su));
    if (schedule_units.size() == 1) {
      co_await ctx.send_text(
          "‚úÖ –ü–µ—Ä–≤–∞—è –µ–¥–∏–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ï—Å–ª–∏ —Å–æ–∑–≤–æ–Ω –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ "
          "–Ω–µ–¥–µ–ª—é –∏–ª–∏ –≤ —Ä–∞–∑–Ω–æ–µ "
          "–≤—Ä–µ–º—è, —Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.");
    } else {
      co_await ctx.send_text("‚úÖ –ï–¥–∏–Ω–∏—Ü–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
    }

    bool need_more;

    Menu<bool> need_more_menu("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–∑–≤–æ–Ω–∞?",
                              ID());
    need_more_menu.add("‚úÖ –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", true);
    need_more_menu.add("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", false);
    AWAIT_ALL(need_more_menu.show(ctx, need_more));
    if (!need_more) {
      break;
    }
  }
  for (auto& su : schedule_units) {
    call.schedule = std::move(su);
    ctx.db.addCall(call);
  }
  co_await ctx.send_text("‚úÖ –°–æ–∑–≤–æ–Ω—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!");
}
}  // namespace bot
