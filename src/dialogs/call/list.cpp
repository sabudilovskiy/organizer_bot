#include "dialogs.hpp"
#include "macro.hpp"
#include "menu.hpp"

namespace bot {

namespace {
constexpr std::size_t one_page = 5;

enum struct ListMenu {
  first,
  second,
  third,
  fourth,
  fifth,
  prev_page,
  next_page,
  settings,
  to_main_menu,
};

}  // namespace

consumer_t call_list_menu(ContextWithUser ctx) {
  auto calls = ctx.db.getCalls(ctx.user_id);

  if (calls.empty()) {
    co_await ctx.send_text(
        "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–∑–≤–æ–Ω–æ–≤. üìå –°–æ–∑–≤–æ–Ω—ã –ø–æ–º–æ–≥–∞—é—Ç –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –≤—Å—Ç—Ä–µ—á–∞—Ö –∏ –∑–∞—Ä–∞–Ω–µ–µ "
        "–ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å–æ–∑–≤–æ–Ω, –∏ —è –ø–æ–º–æ–≥—É –≤–∞–º –µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!");
    co_return;
  }

  std::size_t cur_page = 0;
  std::size_t pages = (calls.size() / one_page) + (calls.size() % one_page != 0);

  for (;;) {
    Menu<ListMenu> menu(fmt::format("üìå –í–∞—à–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–∑–≤–æ–Ω—ã ({}/{}):", cur_page + 1, pages), ID());
    std::size_t first_on_this_page = 5 * cur_page;
    std::size_t last_on_this_page = std::min(4 + 5 * cur_page, calls.size());
    for (std::size_t i = first_on_this_page, idx = 0; i < last_on_this_page; i++, idx++) {
      auto& call = calls[i];
      menu.add(fmt::format("üîπ {}. {} ‚Äî {}, {}, {}", idx + 1, call.name, call.schedule.weekday,
                           call.schedule.time, human_frequence(call.schedule.frequence)),
               ListMenu(idx));
    }
    menu.add("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", ListMenu::prev_page);
    menu.add("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", ListMenu::next_page);
    menu.add("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", ListMenu::settings);
    menu.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", ListMenu::to_main_menu);

    ListMenu choosed;
    AWAIT_ALL(menu.show(ctx, choosed));
    switch (choosed) {
      case ListMenu::first:
      case ListMenu::second:
      case ListMenu::third:
      case ListMenu::fourth:
      case ListMenu::fifth:
        co_await ctx.send_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ üòî");
      case ListMenu::prev_page:
        cur_page = std::max<std::size_t>(cur_page, 1) - 1;
        break;
      case ListMenu::next_page:
        cur_page = std::min(cur_page + 1, pages);
        break;
      case ListMenu::settings:
        co_await ctx.send_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ üòî");
      case ListMenu::to_main_menu:
        ctx.to_main_menu();
        co_yield {};
        co_return;
    }
  }
}

}  // namespace bot
