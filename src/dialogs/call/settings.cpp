#include "dialogs.hpp"
#include "macro.hpp"
#include "menu.hpp"
#include "formatters/all.hpp"

namespace bot {

namespace {

enum struct SettingsMenu {
  daily_notify,
  confirmation,
  time_zone,
  back,
  to_main_menu,
};

enum struct DailyNotifyMenu {
  add_time,
  remove_time,
  back,
};

time_event get_user_all_notify(ContextWithUser ctx) {
  auto time_events = ctx.db.getUserTimeEventsByType(ctx.user.user_id,
                                                    time_event_type::reminder_all_calls);

  if (time_events.size() != 0) {
    return std::move(time_events.front());
  } else {
    return time_event{
        .user_id = ctx.user.user_id,
        .meta = reminder_all_calls_meta_t(),
    };
  }
}

}  // namespace

consumer_t edit_notify_point(ContextWithUser ctx, std::set<time_of_day>& tps,
                             std::size_t idx) {
  auto menu = Menu<>{"‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", ID()};
  menu.add("üïí –£–∫–∞–∑–∞—Ç—å –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è", 0);
  menu.add("‚ùå –£–¥–∞–ª–∏—Ç—å —ç—Ç–æ –≤—Ä–µ–º—è", 1);
  menu.add("üîô –ù–∞–∑–∞–¥", 2);

  std::size_t choosed;
  AWAIT_ALL(menu.show(ctx, choosed));

  if (choosed == 0) {
    tps.erase(std::next(tps.begin(), idx));
    time_of_day td;
    AWAIT_ALL(ctx.read_time("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—á—á:–º–º):", td));
    tps.emplace(td);
  } else if (choosed == 1) {
    tps.erase(std::next(tps.begin(), idx));
  }
}

consumer_t add_notify_point(ContextWithUser ctx, std::set<time_of_day>& tps) {
  time_of_day td;
  AWAIT_ALL(ctx.read_time("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—á—á:–º–º):", td));
  co_await ctx.send_text("‚úÖ –ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!");
  tps.emplace(td);
}

void save_time_points(ContextWithUser ctx, time_event& te) {
  te.next_occurence =
      te.reminder_all_calls_meta().next_occurence(ctx.user.now()).to_utc();

  ctx.time_event_dispatcher.consume(te.time_event_id);
  te.time_event_id = ctx.time_event_dispatcher.push(te);
  ctx.time_event_dispatcher.save();
}

consumer_t daily_notify_settings(ContextWithUser ctx) {
  time_event te = get_user_all_notify(ctx);
  auto& notify_times = te.reminder_all_calls_meta().time_points;
  for (;;) {
    auto idx_add = notify_times.size();
    auto idx_back = idx_add + 1;
    auto idx_main = idx_back + 1;

    std::string menu_text = "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n";
    if (notify_times.empty()) {
      menu_text += "‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n";
    } else {
      menu_text += "üìÖ –¢–µ–∫—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n";
    }

    auto menu = Menu<>{menu_text, ID()};
    for (std::size_t i = 0; auto& notify : notify_times) {
      menu.add(fmt::format("{}", notify), i++);
    }
    menu.add("üïí –î–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", idx_add);
    menu.add("üîô –ù–∞–∑–∞–¥ ", idx_back);
    menu.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", idx_main);
    std::size_t choosed;
    AWAIT_ALL(menu.show(ctx, choosed));
    if (0 <= choosed && choosed < notify_times.size()) {
      AWAIT_ALL(edit_notify_point(ctx, notify_times, choosed));
      save_time_points(ctx, te);
    } else if (choosed == idx_add) {
      AWAIT_ALL(add_notify_point(ctx, notify_times));
      save_time_points(ctx, te);
    } else if (choosed == idx_back) {
      co_return;
    } else {
      ctx.to_main_menu();
      co_yield {};
    }
  }
}

consumer_t call_setting_menu(ContextWithUser ctx) {
  using E = SettingsMenu;
  E choosed;
  Menu<E> menu(R"(‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–∑–≤–æ–Ω—ã! üòä)",
               ID());
  menu.add("‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", E::daily_notify);
  menu.add("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è",
           E::confirmation);  // TODO —Ç—É—Ç –Ω–∞–¥–æ –ª–∏–±–æ –∫—Ä–µ—Å—Ç–∏–∫, –ª–∏–±–æ –≥–∞–ª–æ—á–∫—É
                              // –ø–∏—Å–∞—Ç—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
                              // –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –∏–±–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –∏
                              // –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç
  menu.add("üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å", E::time_zone);
  menu.add("üîô –ù–∞–∑–∞–¥ ", E::back);
  menu.add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ", E::to_main_menu);

  AWAIT_ALL(menu.show(ctx, choosed));

  switch (choosed) {
    case SettingsMenu::daily_notify:
      AWAIT_ALL(daily_notify_settings(ctx));
      break;
    case SettingsMenu::confirmation:
    case SettingsMenu::time_zone:
      co_await ctx.send_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ üòî");
      break;
    case SettingsMenu::back:
      co_return;
    case SettingsMenu::to_main_menu:
      ctx.to_main_menu();
      co_yield {};
      break;
  }
}
}  // namespace bot
