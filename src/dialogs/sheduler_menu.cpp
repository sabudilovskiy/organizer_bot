#include "dialogs.hpp"
#include "macro.hpp"
#include "menu.hpp"

namespace bot {

enum struct schedulerMenu {
  add,
  list,
  repeatable,
  reminders,
  to_main_menu,
};

consumer_t scheduler_menu(ContextWithUser ctx) {
  for (;;) {
    schedulerMenu choosed;
    auto menu = Menu<schedulerMenu>{
        "üìå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏", ID()};
    // clang-format off
  menu.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É",      schedulerMenu::add)
      .add("üìú –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á ",        schedulerMenu::list)
      .add("üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏", schedulerMenu::repeatable)
      .add("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",          schedulerMenu::reminders)
      .add("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",         schedulerMenu::to_main_menu);
    // clang-format on
    AWAIT_ALL(menu.show(ctx, choosed));
    switch (choosed) {
      case schedulerMenu::add:
      case schedulerMenu::list:
      case schedulerMenu::repeatable:
      case schedulerMenu::reminders:
        co_await ctx.send_text("–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ üòî");
        break;
      case schedulerMenu::to_main_menu:
        co_return;
    }
  }
}
}  // namespace bot
