#include "time_event_dispatcher.hpp"

namespace bot {
namespace {
std::string_view state_emoji(state_today st) {
  switch (st) {
    case state_today::past:
      return "üî¥";
    case state_today::other_day:
      return "üü°";
    case state_today::active:
      return "üü¢";
    default:
      tgbm::unreachable();
  }
}

using today_calls_comp = decltype([](const Call& lhs, const Call& rhs) {
  return lhs.schedule.time < rhs.schedule.time;
});

using today_calls_t = std::map<Call, std::string_view, today_calls_comp>;

today_calls_t get_today_calls(const User& user, OrganizerDB& db) {
  auto calls = db.getCalls(user.user_id);
  auto ts = user.now();

  today_calls_t result;

  for (auto& call : calls) {
    auto st = call.schedule.get_state_today(ts);
    if (st != state_today::other_day) {
      result[std::move(call)] = state_emoji(st);
    }
  }
  return result;
}

[[nodiscard]] action_t handle_zero_calls(const User& user,
                                         const tgbm::api::telegram& api) {
  std::string txt = R"(
üîî –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–≤–æ–Ω–∞—Ö üîî

–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–∑–≤–æ–Ω–æ–≤. üì≠

–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ:
üìÖ –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–æ–∑–≤–æ–Ω ‚Äî —á—Ç–æ–±—ã –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–∞–∂–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ.
‚è∞ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–ª –≤–∞–º –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è.
üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–∑–≤–æ–Ω–æ–≤ ‚Äî —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ —É–ø—É—â–µ–Ω–æ.

–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å–æ–∑–≤–æ–Ω, –∑–∞–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é üì≤

–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä
  )";
  (void)co_await api.sendMessage({
      .chat_id = user.chat_id,
      .text = std::move(txt),
  });
}

void reschedule(const User& user, time_event& te, time_event_dispatcher& dispatcher) {
  te.next_occurence = te.reminder_all_calls_meta()
                          .next_occurence(user.now() + std::chrono::minutes(1))
                          .to_utc();
  dispatcher.consume(te.time_event_id);
  dispatcher.push(te);
  dispatcher.save();
}

}  // namespace

consumer_t handle_all_calls(OrganizerDB& db, const tgbm::api::telegram& api,
                            time_event_dispatcher& dispatcher, time_event event) {
  assert(event.type() == time_event_type::reminder_all_calls);

  auto user = db.fetchUser(RequestUser{
      .user_id = event.user_id.value(),
  });
  reschedule(user, event, dispatcher);

  auto today_calls = get_today_calls(user, db);

  if (today_calls.empty()) {
    co_await handle_zero_calls(user, api);
    co_return;
  }

  std::string txt = R"(üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —Å–æ–∑–≤–æ–Ω—ã
      
        üîî –ö–∞–∫ —á–∏—Ç–∞—Ç—å —Ü–≤–µ—Ç–∞?
        
        üî¥ ‚Äî –£–∂–µ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–∑–≤–æ–Ω—ã
        üü¢ ‚Äî –¢–µ–∫—É—â–∏–µ —Å–æ–∑–≤–æ–Ω—ã (–∏–¥—É—Ç –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç)
        üü° ‚Äî –ë—É–¥—É—â–∏–µ —Å–æ–∑–≤–æ–Ω—ã (–µ—â—ë –≤–ø–µ—Ä–µ–¥–∏)
        
        –ï—Å–ª–∏ —É –≤–∞—Å —Å–µ–≥–æ–¥–Ω—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —Å–æ–∑–≤–æ–Ω—ã, –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è. 
        –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å! ‚è∞)";

  std::size_t idx = 0;
  for (auto& [call, emo] : today_calls) {
    auto txt = fmt::format("{} {} - {} ‚Äî {} ({})", emo, call.begin(), call.end(),
                           call.description, human_frequence(call.schedule.frequence));
    txt.append(txt);
  }

  (void)co_await api.sendMessage({
      .chat_id = user.chat_id,
      .text = std::move(txt),
  });
}
}  // namespace bot
